buildscript {
	ext {
		protobufVersion = '3.23.4'
		protobufPluginVersion = '0.8.18'
		grpcVersion = '1.63.0'
		springBootVersion = '3.3.1'
		springBootGrpcVersion = '3.1.0.RELEASE'
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
	}
}

plugins {
	id 'idea'
	id 'eclipse'
	id 'java-library'
	id 'org.springframework.boot' version "${springBootVersion}"
	id 'com.google.protobuf' version "${protobufPluginVersion}"
	id 'io.spring.dependency-management' version '1.1.5'
	id 'org.jetbrains.kotlin.jvm' version '1.9.24'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.9.24'
}

group = 'com.store'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
	mavenLocal()
}

dependencies {
	implementation "io.grpc:grpc-protobuf:${grpcVersion}"
	implementation "io.grpc:grpc-stub:${grpcVersion}"

	implementation 'org.springframework.boot:spring-boot-starter'
	implementation "net.devh:grpc-spring-boot-starter:${springBootGrpcVersion}"
	implementation 'org.jetbrains.kotlin:kotlin-reflect'

	compileOnly 'jakarta.annotation:jakarta.annotation-api:1.3.5' // Java 9+ compatibility - Do NOT update to 2.0.0

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
	testImplementation 'in.specmatic:specmatic-grpc:0.0.1'

	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

protobuf {
	protoc {
		artifact = "com.google.protobuf:protoc:${protobufVersion}"
	}
	generatedFilesBaseDir = "$projectDir/src/generated"
	clean {
		delete generatedFilesBaseDir
	}
	plugins {
		grpc {
			artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
		}
	}
	generateProtoTasks {
		all()*.plugins {
			grpc {}
		}
	}
}

kotlin {
	compilerOptions {
		freeCompilerArgs.addAll '-Xjsr305=strict'
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

eclipse {
	classpath {
		file.beforeMerged { cp ->
			def generatedGrpcFolder = new org.gradle.plugins.ide.eclipse.model.SourceFolder('src/generated/main/grpc', null);
			generatedGrpcFolder.entryAttributes['ignore_optional_problems'] = 'true';
			cp.entries.add(generatedGrpcFolder);
			def generatedJavaFolder = new org.gradle.plugins.ide.eclipse.model.SourceFolder('src/generated/main/java', null);
			generatedJavaFolder.entryAttributes['ignore_optional_problems'] = 'true';
			cp.entries.add(generatedJavaFolder);
		}
	}
}

idea {
	module {
		sourceDirs += file("src/generated/main/java")
		sourceDirs += file("src/generated/main/grpc")
		generatedSourceDirs += file("src/generated/main/java")
		generatedSourceDirs += file("src/generated/main/grpc")
	}
}
