buildscript {
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:3.3.1"
    }
}

plugins {
    id("idea")
    id("eclipse")
    id("java-library")
    id("org.springframework.boot") version("3.3.1")
    id("com.google.protobuf") version("0.9.5")
    id("io.spring.dependency-management") version("1.1.5")
    id("org.jetbrains.kotlin.jvm") version("2.0.0")
    id("org.jetbrains.kotlin.plugin.spring") version("1.9.24")
}


java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    maven {
        url "https://repo.specmatic.io/releases"
    }
    mavenCentral()
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter"
    implementation "org.springframework.boot:spring-boot-starter-aop"
    implementation "net.devh:grpc-spring-boot-starter:3.1.0.RELEASE"
    implementation "org.jetbrains.kotlin:kotlin-reflect"
    implementation "build.buf:protovalidate:0.2.1"

    compileOnly "jakarta.annotation:jakarta.annotation-api:1.3.5" // Java 9+ compatibility - Do NOT update to 2.0.0

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "io.specmatic.grpc:specmatic-grpc:$specmaticGrpcVersion"
    testImplementation "org.testcontainers:junit-jupiter:1.21.3"
}

sourceSets {
    main {
        proto {
            srcDir 'specmatic-order-contracts/io/specmatic/examples/store/grpc'
        }
    }
}

protobuf {
//    generatedFilesBaseDir = "$projectDir/src/generated"
    protoc {
        artifact = "com.google.protobuf:protoc:3.23.4"
    }

    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:1.63.0"
        }
    }
    generateProtoTasks {
        ofSourceSet('main').configureEach {
            plugins {
                grpc {}
            }
        }
    }
}

kotlin {
    compilerOptions {
        freeCompilerArgs.addAll("-Xjsr305=strict")
    }
}

tasks.test {
    useJUnitPlatform()
    forkEvery = 1
    maxParallelForks = 1

    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
        exceptionFormat = "full"
    }

    afterSuite { desc, result ->
        if (!desc.parent) {
            println "-----------------------------------------------------"
            println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            println "-----------------------------------------------------"
        }
    }
}
